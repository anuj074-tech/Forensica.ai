{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/google-genai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-witness-statements.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A flow for transcribing and analyzing witness statements to identify key entities,\n * contradictions, and potential deception.\n *\n * - analyzeWitnessStatements - A function that handles the analysis of witness statements.\n * - AnalyzeWitnessStatementsInput - The input type for the analyzeWitnessStatements function.\n * - AnalyzeWitnessStatementsOutput - The return type for the analyzeWitnessStatements function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzeWitnessStatementsInputSchema = z.object({\n  statement: z\n    .string()\n    .describe('The witness statement to be analyzed.'),\n});\nexport type AnalyzeWitnessStatementsInput = z.infer<typeof AnalyzeWitnessStatementsInputSchema>;\n\nconst AnalyzeWitnessStatementsOutputSchema = z.object({\n  entities: z.array(\n    z.string().describe('Key entities identified in the witness statement.')\n  ).describe('A list of key entities identified in the witness statement.'),\n  contradictions: z.array(\n    z.string().describe('Potential contradictions found in the witness statement.')\n  ).describe('A list of potential contradictions found in the witness statement.'),\n  deceptionScore: z\n    .number()\n    .describe('A score indicating the likelihood of deception in the witness statement.'),\n  summary: z.string().describe('A summary of the witness statement.'),\n});\nexport type AnalyzeWitnessStatementsOutput = z.infer<typeof AnalyzeWitnessStatementsOutputSchema>;\n\nexport async function analyzeWitnessStatements(\n  input: AnalyzeWitnessStatementsInput\n): Promise<AnalyzeWitnessStatementsOutput> {\n  return analyzeWitnessStatementsFlow(input);\n}\n\nconst analyzeWitnessStatementsPrompt = ai.definePrompt({\n  name: 'analyzeWitnessStatementsPrompt',\n  input: {schema: AnalyzeWitnessStatementsInputSchema},\n  output: {schema: AnalyzeWitnessStatementsOutputSchema},\n  prompt: `You are an AI expert in analyzing witness statements in criminal investigations.\n\n  Your task is to analyze the provided witness statement, identify key entities, detect potential contradictions, and assess the likelihood of deception.\n\n  Statement: {{{statement}}}\n\n  Output:\n  - entities: A list of key entities (persons, places, things) mentioned in the statement.\n  - contradictions: Any inconsistencies or contradictions within the statement itself or compared to common sense.\n  - deceptionScore: A numerical score (0-1, where 1 is most likely to be lies) indicating the probability of deception in the statement based on linguistic cues and inconsistencies.\n  - summary: A concise summary of the witness statement.\n  Please format your output as a JSON object.\n`,\n});\n\nconst analyzeWitnessStatementsFlow = ai.defineFlow(\n  {\n    name: 'analyzeWitnessStatementsFlow',\n    inputSchema: AnalyzeWitnessStatementsInputSchema,\n    outputSchema: AnalyzeWitnessStatementsOutputSchema,\n  },\n  async input => {\n    const {output} = await analyzeWitnessStatementsPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,WAAW,uIAAA,CAAA,IAAC,CACT,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,UAAU,uIAAA,CAAA,IAAC,CAAC,KAAK,CACf,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,sDACpB,QAAQ,CAAC;IACX,gBAAgB,uIAAA,CAAA,IAAC,CAAC,KAAK,CACrB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,6DACpB,QAAQ,CAAC;IACX,gBAAgB,uIAAA,CAAA,IAAC,CACd,MAAM,GACN,QAAQ,CAAC;IACZ,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGO,eAAe,yBACpB,KAAoC;IAEpC,OAAO,6BAA6B;AACtC;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACrD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAmC;IACnD,QAAQ;QAAC,QAAQ;IAAoC;IACrD,QAAQ,CAAC;;;;;;;;;;;;AAYX,CAAC;AACD;AAEA,MAAM,+BAA+B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAChD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,+BAA+B;IACtD,OAAO;AACT;;;IAlCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/reconstruct-crime-scene-3d.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A flow for reconstructing a crime scene in 3D from images and videos.\n *\n * - reconstructCrimeScene3D - A function that handles the 3D reconstruction process.\n * - ReconstructCrimeScene3DInput - The input type for the reconstructCrimeScene3D function.\n * - ReconstructCrimeScene3DOutput - The return type for the reconstructCrimeScene3D function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ReconstructCrimeScene3DInputSchema = z.object({\n  mediaDataUri: z\n    .string()\n    .describe(\n      \"A photo or video of a crime scene, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type ReconstructCrimeScene3DInput = z.infer<typeof ReconstructCrimeScene3DInputSchema>;\n\nconst ReconstructCrimeScene3DOutputSchema = z.object({\n  sceneDescription: z.string().describe('A text description of the reconstructed 3D crime scene.'),\n  spatialModelDataUri: z\n    .string()\n    .optional()\n    .describe(\n      'A data URI containing the 3D spatial model of the crime scene, if available. Format: data:<model_mimetype>;base64,<encoded_data>.'\n    ),\n});\nexport type ReconstructCrimeScene3DOutput = z.infer<typeof ReconstructCrimeScene3DOutputSchema>;\n\nexport async function reconstructCrimeScene3D(input: ReconstructCrimeScene3DInput): Promise<ReconstructCrimeScene3DOutput> {\n  return reconstructCrimeScene3DFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'reconstructCrimeScene3DPrompt',\n  input: {schema: ReconstructCrimeScene3DInputSchema},\n  output: {schema: ReconstructCrimeScene3DOutputSchema},\n  prompt: `You are an expert in crime scene reconstruction. You will be provided with a photo or video of a crime scene.\nYour task is to analyze the media and reconstruct the environment in 3D, providing a textual description of the scene.\n\nConsider details such as room size, object placement, and potential entry/exit points.\n\nHere is the crime scene media:\n\n{{media url=mediaDataUri}}`,\n});\n\nconst reconstructCrimeScene3DFlow = ai.defineFlow(\n  {\n    name: 'reconstructCrimeScene3DFlow',\n    inputSchema: ReconstructCrimeScene3DInputSchema,\n    outputSchema: ReconstructCrimeScene3DOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACtC,qBAAqB,uIAAA,CAAA,IAAC,CACnB,MAAM,GACN,QAAQ,GACR,QAAQ,CACP;AAEN;AAGO,eAAe,wBAAwB,KAAmC;IAC/E,OAAO,4BAA4B;AACrC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAkC;IAClD,QAAQ;QAAC,QAAQ;IAAmC;IACpD,QAAQ,CAAC;;;;;;;0BAOe,CAAC;AAC3B;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA3BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 430, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/detect-identify-objects.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for detecting and identifying objects in crime scene images.\n *\n * The flow takes an image as input and returns a list of identified objects with their descriptions.\n * - detectIdentifyObjects - The function that processes the image and returns identified objects.\n * - DetectIdentifyObjectsInput - The input type for the detectIdentifyObjects function.\n * - DetectIdentifyObjectsOutput - The output type for the detectIdentifyObjects function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst DetectIdentifyObjectsInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      'A photo of the crime scene, as a data URI that must include a MIME type and use Base64 encoding. Expected format: \\'data:<mimetype>;base64,<encoded_data>\\'.'    ),\n});\nexport type DetectIdentifyObjectsInput = z.infer<typeof DetectIdentifyObjectsInputSchema>;\n\nconst DetectedObjectSchema = z.object({\n  name: z.string().describe('The identified name of the object.'),\n  description: z.string().describe('A description of the object and its potential relevance to the crime scene.'),\n  confidence: z.number().describe('The confidence level of the object identification (0-1).'),\n});\n\nconst DetectIdentifyObjectsOutputSchema = z.array(DetectedObjectSchema);\nexport type DetectIdentifyObjectsOutput = z.infer<typeof DetectIdentifyObjectsOutputSchema>;\n\nexport async function detectIdentifyObjects(input: DetectIdentifyObjectsInput): Promise<DetectIdentifyObjectsOutput> {\n  return detectIdentifyObjectsFlow(input);\n}\n\nconst detectIdentifyObjectsPrompt = ai.definePrompt({\n  name: 'detectIdentifyObjectsPrompt',\n  input: {schema: DetectIdentifyObjectsInputSchema},\n  output: {schema: DetectIdentifyObjectsOutputSchema},\n  prompt: `You are an expert in crime scene investigation and object recognition.\n  Your task is to analyze the image of a crime scene and identify potential objects of interest that could serve as evidence.\n  Provide a detailed description of each object and its potential relevance to the investigation.\n  Also, provide the confidence level (0-1) for each object identified.\n\n  Analyze the following image: {{media url=photoDataUri}}\n\n  Format your response as a JSON array of objects, where each object has the following properties:\n  - name: The identified name of the object.\n  - description: A description of the object and its potential relevance to the crime scene.\n  - confidence: The confidence level of the object identification (0-1).\n  `,\n});\n\nconst detectIdentifyObjectsFlow = ai.defineFlow(\n  {\n    name: 'detectIdentifyObjectsFlow',\n    inputSchema: DetectIdentifyObjectsInputSchema,\n    outputSchema: DetectIdentifyObjectsOutputSchema,\n  },\n  async input => {\n    const {output} = await detectIdentifyObjectsPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AACN;AAGA,MAAM,uBAAuB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AAG3C,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAClD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;;;;;;;;;;EAWT,CAAC;AACH;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,4BAA4B;IACnD,OAAO;AACT;;;IA/BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-bloodstain-patterns.ts"],"sourcesContent":["// src/ai/flows/analyze-bloodstain-patterns.ts\n'use server';\n/**\n * @fileOverview Analyzes bloodstain patterns in images to infer weapon types and trajectories.\n *\n * - analyzeBloodstainPatterns - A function that handles the bloodstain pattern analysis process.\n * - AnalyzeBloodstainPatternsInput - The input type for the analyzeBloodstainPatterns function.\n * - AnalyzeBloodstainPatternsOutput - The return type for the analyzeBloodstainPatterns function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzeBloodstainPatternsInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo of a bloodstain pattern, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  additionalContext: z\n    .string()\n    .optional()\n    .describe('Additional context about the crime scene.'),\n});\nexport type AnalyzeBloodstainPatternsInput = z.infer<typeof AnalyzeBloodstainPatternsInputSchema>;\n\nconst AnalyzeBloodstainPatternsOutputSchema = z.object({\n  weaponType: z\n    .string()\n    .describe('The probable type of weapon used based on the bloodstain pattern.'),\n  trajectory: z\n    .string()\n    .describe('The inferred trajectory of the blood spatter.'),\n  additionalNotes: z\n    .string()\n    .optional()\n    .describe('Any additional notes or observations about the bloodstain pattern.'),\n});\nexport type AnalyzeBloodstainPatternsOutput = z.infer<typeof AnalyzeBloodstainPatternsOutputSchema>;\n\nexport async function analyzeBloodstainPatterns(\n  input: AnalyzeBloodstainPatternsInput\n): Promise<AnalyzeBloodstainPatternsOutput> {\n  return analyzeBloodstainPatternsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'analyzeBloodstainPatternsPrompt',\n  input: {schema: AnalyzeBloodstainPatternsInputSchema},\n  output: {schema: AnalyzeBloodstainPatternsOutputSchema},\n  prompt: `You are an expert forensic analyst specializing in bloodstain pattern analysis.\n\nYou will use this information to infer the weapon type and blood spatter trajectory.\n\nUse the following as the primary source of information about the bloodstain pattern.\n\nPhoto: {{media url=photoDataUri}}\n{% if additionalContext %}Additional Context: {{{additionalContext}}}{% endif %}\n\nBased on the bloodstain patterns in the provided image, determine the likely weapon type, blood spatter trajectory and any addtional relevant notes about the pattern.\n\nEnsure that the output follows the defined JSON schema with descriptions.`, // Corrected Handlebars syntax here\n});\n\nconst analyzeBloodstainPatternsFlow = ai.defineFlow(\n  {\n    name: 'analyzeBloodstainPatternsFlow',\n    inputSchema: AnalyzeBloodstainPatternsInputSchema,\n    outputSchema: AnalyzeBloodstainPatternsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,8CAA8C;;;;;;AAE9C;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEJ,mBAAmB,uIAAA,CAAA,IAAC,CACjB,MAAM,GACN,QAAQ,GACR,QAAQ,CAAC;AACd;AAGA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;IACZ,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;IACZ,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,GACR,QAAQ,CAAC;AACd;AAGO,eAAe,0BACpB,KAAqC;IAErC,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAoC;IACpD,QAAQ;QAAC,QAAQ;IAAqC;IACtD,QAAQ,CAAC;;;;;;;;;;;yEAW8D,CAAC;AAC1E;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 574, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-investigative-report.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Generates a comprehensive investigative report summarizing evidence,\n *  AI reasoning, confidence scores, and suspect rankings.\n *\n * - generateInvestigativeReport - A function that generates the investigative report.\n * - GenerateInvestigativeReportInput - The input type for the generateInvestigativeReport function.\n * - GenerateInvestigativeReportOutput - The return type for the generateInvestigativeReport function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateInvestigativeReportInputSchema = z.object({\n  evidenceSummary: z\n    .string()\n    .describe('A summary of the evidence collected at the crime scene.'),\n  aiReasoning: z\n    .string()\n    .describe('The AI’s reasoning and analysis of the evidence.'),\n  confidenceScores: z\n    .string()\n    .describe('Confidence scores for different aspects of the analysis.'),\n  suspectRankings: z\n    .string()\n    .describe(\n      'Ranked list of suspects with their motives, opportunities, and proximity to the scene.'\n    ),\n  escapeRoutes: z\n    .string()\n    .describe('Possible escape routes identified by the AI.'),\n});\nexport type GenerateInvestigativeReportInput = z.infer<\n  typeof GenerateInvestigativeReportInputSchema\n>;\n\nconst GenerateInvestigativeReportOutputSchema = z.object({\n  report: z.string().describe('The comprehensive investigative report.'),\n});\nexport type GenerateInvestigativeReportOutput = z.infer<\n  typeof GenerateInvestigativeReportOutputSchema\n>;\n\nexport async function generateInvestigativeReport(\n  input: GenerateInvestigativeReportInput\n): Promise<GenerateInvestigativeReportOutput> {\n  return generateInvestigativeReportFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateInvestigativeReportPrompt',\n  input: {schema: GenerateInvestigativeReportInputSchema},\n  output: {schema: GenerateInvestigativeReportOutputSchema},\n  prompt: `You are an expert in generating investigative reports.\n\n  Based on the provided evidence summary, AI reasoning, confidence scores,\n  suspect rankings, and identified escape routes, create a comprehensive\n  investigative report that is clear, concise, and well-organized.\n\n  Evidence Summary: {{{evidenceSummary}}}\n  AI Reasoning: {{{aiReasoning}}}\n  Confidence Scores: {{{confidenceScores}}}\n  Suspect Rankings: {{{suspectRankings}}}\n  Escape Routes: {{{escapeRoutes}}}\n\n  Report:\n  `,\n});\n\nconst generateInvestigativeReportFlow = ai.defineFlow(\n  {\n    name: 'generateInvestigativeReportFlow',\n    inputSchema: GenerateInvestigativeReportInputSchema,\n    outputSchema: GenerateInvestigativeReportOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CAAC;IACZ,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;IACZ,kBAAkB,uIAAA,CAAA,IAAC,CAChB,MAAM,GACN,QAAQ,CAAC;IACZ,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CACP;IAEJ,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CAAC;AACd;AAKA,MAAM,0CAA0C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAKO,eAAe,4BACpB,KAAuC;IAEvC,OAAO,gCAAgC;AACzC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAsC;IACtD,QAAQ;QAAC,QAAQ;IAAuC;IACxD,QAAQ,CAAC;;;;;;;;;;;;;EAaT,CAAC;AACH;AAEA,MAAM,kCAAkC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 649, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/case/%5BcaseId%5D/report/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {analyzeWitnessStatements as '40b6f19be3538c4b7b408a0e8719241a732d252bbe'} from 'ACTIONS_MODULE0'\nexport {reconstructCrimeScene3D as '402d3e5203ae9408c53d67ef394ef2f457196b4eb1'} from 'ACTIONS_MODULE1'\nexport {detectIdentifyObjects as '40e38856acb4991c435853407fb1dcecfb030c0dd4'} from 'ACTIONS_MODULE2'\nexport {analyzeBloodstainPatterns as '402f10b134f6bd81ada28c535fb73da092f617bb83'} from 'ACTIONS_MODULE3'\nexport {generateInvestigativeReport as '40069713071d034c6325a8d68936b32088f829d398'} from 'ACTIONS_MODULE4'\n"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA","debugId":null}},
    {"offset": {"line": 725, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/case/%5BcaseId%5D/report/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/case/[caseId]/report/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/case/[caseId]/report/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyS,GACtU,uEACA","debugId":null}},
    {"offset": {"line": 739, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/case/%5BcaseId%5D/report/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/case/[caseId]/report/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/case/[caseId]/report/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqR,GAClT,mDACA","debugId":null}},
    {"offset": {"line": 753, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}