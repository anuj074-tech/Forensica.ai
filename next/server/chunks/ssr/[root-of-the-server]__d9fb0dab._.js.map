{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/google-genai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/create-case-dossier.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A comprehensive case analysis AI agent.\n *\n * - createCaseDossier - A function that handles the full case analysis and dossier generation.\n * - CaseDossierInput - The input type for the createCaseDossier function.\n * - CaseDossierOutput - The return type for the createCaseDossier function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CaseDossierInputSchema = z.object({\n  crimeScenePictures: z\n    .array(z.string())\n    .describe('An array of data URIs for crime scene pictures.'),\n  evidenceLog: z\n    .string()\n    .describe('A log of all collected evidence and their descriptions.'),\n  witnessStatements: z\n    .string()\n    .describe('A compilation of all witness statements.'),\n  victimRelationships: z\n    .string()\n    .describe(\n      \"Descriptions of suspects' relationships with the victim, including motives and alibis.\"\n    ),\n  forensicReport: z\n    .string()\n    .describe('The official forensic report findings.'),\n});\nexport type CaseDossierInput = z.infer<typeof CaseDossierInputSchema>;\n\nconst CaseDossierOutputSchema = z.object({\n  caseSummary: z\n    .string()\n    .describe(\n      \"A brief, high-level summary of the entire case and the AI's primary conclusions.\"\n    ),\n  victimProfile: z.string().describe('A profile of the victim.'),\n  suspectProfiles: z.array(\n    z.object({\n      name: z.string(),\n      profile: z.string().describe('A detailed profile of the suspect.'),\n      motive: z.string(),\n      opportunity: z.string(),\n      deceptionScore: z\n        .number()\n        .describe('A score from 0-1 indicating likelihood of deception.'),\n    })\n  ),\n  evidenceSummary: z\n    .string()\n    .describe('A summary of the key pieces of evidence and their implications.'),\n  crimeSceneReconstruction: z\n    .string()\n    .describe(\n      'A narrative reconstructing the likely sequence of events at the crime scene.'\n    ),\n  timelineOfEvents: z\n    .array(\n      z.object({\n        time: z.string(),\n        event: z.string(),\n      })\n    )\n    .describe(\n      'A chronological timeline of events before, during, and after the crime.'\n    ),\n  mainPersonsOfInterest: z\n    .array(z.string())\n    .describe('A ranked list of the main persons of interest.'),\n  potentialInconsistencies: z\n    .array(z.string())\n    .describe(\n      'A list of identified inconsistencies across all provided data.'\n    ),\n  investigativeLeads: z\n    .array(z.string())\n    .describe(\n      'A list of actionable next steps and investigative leads for human detectives.'\n    ),\n});\nexport type CaseDossierOutput = z.infer<typeof CaseDossierOutputSchema>;\n\nexport async function createCaseDossier(\n  input: CaseDossierInput\n): Promise<CaseDossierOutput> {\n  return createCaseDossierFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'createCaseDossierPrompt',\n  input: {schema: CaseDossierInputSchema},\n  output: {schema: CaseDossierOutputSchema},\n  prompt: `You are a world-renowned criminal investigator AI, known as Forensica. Your task is to synthesize disparate pieces of information into a coherent and comprehensive case dossier. Analyze the provided data meticulously to uncover links, inconsistencies, and actionable leads.\n\n  **Case Files:**\n\n  **1. Crime Scene Photos:**\n  {{#each crimeScenePictures}}\n  - Image: {{media url=this}}\n  {{/each}}\n  *Analyze these images for environmental clues, signs of struggle, points of entry/exit, and any objects that seem out of place or could be potential evidence.*\n\n  **2. Evidence Log:**\n  \\`\\`\\`\n  {{{evidenceLog}}}\n  \\`\\`\\`\n  *Correlate the items in the evidence log with the crime scene photos and other case information. What is the significance of each piece of evidence?*\n\n  **3. Witness Statements:**\n  \\`\\`\\`\n  {{{witnessStatements}}}\n  \\`\\`\\`\n  *Scrutinize these statements for contradictions, emotional cues, and temporal inconsistencies. Compare statements against each other and against known facts.*\n\n  **4. Victim & Suspect Relationships:**\n  \\`\\`\\`\n  {{{victimRelationships}}}\n  \\`\\`\\`\n  *Map out the social and professional network of the victim. Analyze the provided relationships, motives, and alibis for each suspect. Who had the means, motive, and opportunity?*\n\n  **5. Forensic Report:**\n  \\`\\`\\`\n  {{{forensicReport}}}\n  \\`\\`\\`\n  *Integrate the scientific findings from the forensic report. How do these findings support or refute suspect alibis and witness statements? What do they tell you about the sequence of events?*\n\n  **Your Mission:**\n\n  Based on a thorough analysis of all the above information, generate a complete case dossier. The output must be a JSON object that strictly adheres to the provided schema. Be thorough, logical, and insightful in your analysis for each field.\n\n  **Output Schema:**\n  ${JSON.stringify(CaseDossierOutputSchema.describe(''), null, 2)}\n  `,\n});\n\nconst createCaseDossierFlow = ai.defineFlow(\n  {\n    name: 'createCaseDossierFlow',\n    inputSchema: CaseDossierInputSchema,\n    outputSchema: CaseDossierOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,oBAAoB,uIAAA,CAAA,IAAC,CAClB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;IACZ,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;IACZ,mBAAmB,uIAAA,CAAA,IAAC,CACjB,MAAM,GACN,QAAQ,CAAC;IACZ,qBAAqB,uIAAA,CAAA,IAAC,CACnB,MAAM,GACN,QAAQ,CACP;IAEJ,gBAAgB,uIAAA,CAAA,IAAC,CACd,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CACP;IAEJ,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,KAAK,CACtB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM;QACd,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC7B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM;QAChB,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM;QACrB,gBAAgB,uIAAA,CAAA,IAAC,CACd,MAAM,GACN,QAAQ,CAAC;IACd;IAEF,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CAAC;IACZ,0BAA0B,uIAAA,CAAA,IAAC,CACxB,MAAM,GACN,QAAQ,CACP;IAEJ,kBAAkB,uIAAA,CAAA,IAAC,CAChB,KAAK,CACJ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM;QACd,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,IAED,QAAQ,CACP;IAEJ,uBAAuB,uIAAA,CAAA,IAAC,CACrB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;IACZ,0BAA0B,uIAAA,CAAA,IAAC,CACxB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CACP;IAEJ,oBAAoB,uIAAA,CAAA,IAAC,CAClB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CACP;AAEN;AAGO,eAAe,kBACpB,KAAuB;IAEvB,OAAO,sBAAsB;AAC/B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAsB;IACtC,QAAQ;QAAC,QAAQ;IAAuB;IACxC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuCT,EAAE,KAAK,SAAS,CAAC,wBAAwB,QAAQ,CAAC,KAAK,MAAM,GAAG;EAChE,CAAC;AACH;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA9DoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {createCaseDossier as '40f7940a759b459d55fddb4ae91c469d4cbf53ce24'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 476, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 490, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}